name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}

jobs:
  build-library:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Build and install pegelhub-library
        run: |
          cd pegelhub-library
          mvn clean install -DskipTests
          
      - name: Upload library artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pegelhub-library-artifacts
          path: pegelhub-library/target/*.jar

  build-core:
    needs: build-library
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Download library artifacts
        uses: actions/download-artifact@v4
        with:
          name: pegelhub-library-artifacts
          path: library-jars
          
      - name: Install library to local repo
        run: |
          mvn install:install-file -Dfile=library-jars/pegelhub-library-1.0.0.jar -DgroupId=com.stm -DartifactId=pegelhub-library -Dversion=1.0.0 -Dpackaging=jar
          
      - name: Build pegelhub-core
        run: |
          cd pegelhub-core
          mvn clean package -DskipTests
          # Debug output to see what files were created
          echo "Files in starter/target directory:"
          ls -la starter/target/
          # Create target directory if it doesn't exist and copy JAR
          mkdir -p target
          cp starter/target/app-jar-with-dependencies.jar target/app.jar
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./pegelhub-core
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/pegelhub-core:latest

  build-connectors:
    needs: build-library
    runs-on: ubuntu-latest
    strategy:
      matrix:
        connector:
          - pegelhub-icc-connector
          - pegelhub-iec-connector
          - pegelhub-ftp-connector
          - pegelhub-tstp-connector
          - Connector4...20mA
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Download library artifacts
        uses: actions/download-artifact@v4
        with:
          name: pegelhub-library-artifacts
          path: library-jars
          
      - name: Install library to local repo
        run: |
          mvn install:install-file -Dfile=library-jars/pegelhub-library-1.0.0.jar -DgroupId=com.stm -DartifactId=pegelhub-library -Dversion=1.0.0 -Dpackaging=jar
          
      - name: Build ${{ matrix.connector }}
        run: |
          cd ${{ matrix.connector }}
          mvn clean package -DskipTests
          # Debug output to see what files were created
          echo "Files in target directory:"
          ls -la target/ || echo "Target directory not found"
          # Create target directory if it doesn't exist
          mkdir -p target
          # Look for the JAR and copy it - handle both simple and multi-module projects
          if [ -f target/*.jar ]; then
            cp target/*.jar target/app.jar
          elif [ -d "starter/target/" ]; then
            cp starter/target/*.jar target/app.jar
          else
            find . -name "*.jar" -not -path "*/\.*" | xargs -I{} cp {} target/app.jar || echo "No JAR files found"
          fi
          
      - name: Prepare RevPi library files
        if: matrix.connector == 'Connector4...20mA'
        run: |
          cd ${{ matrix.connector }}
          # Create the directory for the native library file
          mkdir -p src/main/java/org/example
          # Create an empty library file to ensure Docker build succeeds
          touch src/main/java/org/example/libRevPiReader.so
          # Debug output
          echo "Created placeholder libRevPiReader.so for Docker build"
          ls -la src/main/java/org/example/
          
      - name: Set image tag
        id: set-tag
        run: |
          if [ "${{ matrix.connector }}" = "Connector4...20mA" ]; then
            echo "IMAGE_TAG=${{ env.IMAGE_PREFIX }}/connector-4-20ma:latest" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=${{ env.IMAGE_PREFIX }}/${{ matrix.connector }}:latest" >> $GITHUB_OUTPUT
          fi
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.connector }}
          push: true
          tags: ${{ steps.set-tag.outputs.IMAGE_TAG }}